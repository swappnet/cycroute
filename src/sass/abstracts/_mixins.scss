@use '../abstracts/breakpoints' as *;

//Flex center
@mixin flexCenter($direction, $gap) {
  display: flex;
  flex-direction: $direction;
  align-items: center;
  justify-content: center;
  gap: $gap;
}

//Reset
@mixin rst {
  margin: 0;
  padding: 0;
}

//Center absolute el.
@mixin centerAbs {
  top: 0;
  bottom: 0;
  margin: auto;
}

//Hover only for device with hover
@mixin on-hover {
  @media (hover: hover) and (pointer: fine) {
    &:hover {
      @content;
    }
  }
}

//Custom media query with breakpoints
@mixin media($from: false, $until: false, $and: false, $media-type: all) {
  $min-width: 0;
  $max-width: 0;
  $query: '';

  //FROM: this breakpoint (inclusive)
  @if $from {
    @if type-of($from) == number {
      $min-width: $from;
    } @else {
      $min-width: map-get($breakpoints, $from);
    }
  }

  //UNTIL: this breakpoint (exclusive)
  @if $until {
    @if type-of($until) == number {
      $max-width: $until - 1px;
    } @else {
      $max-width: map-get($breakpoints, $until) - 1px;
    }
  }

  @if $min-width != 0 {
    $query: '#{$query} and (min-width: #{$min-width})';
  }
  @if $max-width != 0 {
    $query: '#{$query} and (max-width: #{$max-width})';
  }
  @if $and {
    $query: '#{$query} and (#{$and})';
  }

  @if ($media-type == 'all' and $query != '') {
    $media-type: '';
    $query: str-slice(unquote($query), 6);
  }

  @media #{$media-type + $query} {
    @content;
  }
}

//Check what theme is active dark or light in classname
@mixin themify($themes) {
  @each $theme, $map in $themes {
    .theme-#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

//Get color from specific theme(dark or light)
@function themed($key) {
  @return map-get($theme-map, $key);
}

@keyframes spin {
  to {
    -webkit-transform: rotate(360deg);
  }
}
@-webkit-keyframes spin {
  to {
    -webkit-transform: rotate(360deg);
  }
}

@keyframes loadbar {
  0%,
  to {
    left: 0;
    right: 80%;
  }
  25%,
  75% {
    left: 0;
    right: 0;
  }
  50% {
    left: 80%;
    right: 0;
  }
}

//Create inner shadow for box
@mixin inner-side-shadow(
  $side: bottom,
  $size: 20px,
  $color: rgba($black, 0.25)
) {
  $helper: round($size * 0.65);

  @if ($side == top) {
    box-shadow: inset 0 $helper $size (-1) * $helper $color;
  } @else if ($side == left) {
    box-shadow: inset $helper 0 $size (-1) * $helper $color;
  } @else if ($side == right) {
    box-shadow: inset (-1) * $helper 0 $size (-1) * $helper $color;
  } @else if ($side == bottom) {
    box-shadow: inset 0 (-1) * $helper $size (-1) * $helper $color;
  }
}

//Create a triangle for dropdown, use with &::after or &::before
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  display: block;
  width: 0;
  height: 0;

  border-style: solid;
  border-width: $triangle-size;

  content: '';

  @if ($triangle-direction == down) {
    border-bottom-width: 0;
    border-color: $triangle-color transparent transparent;
  }
  @if ($triangle-direction == up) {
    border-top-width: 0;
    border-color: transparent transparent $triangle-color;
  }
  @if ($triangle-direction == right) {
    border-right-width: 0;
    border-color: transparent transparent transparent $triangle-color;
  }
  @if ($triangle-direction == left) {
    border-left-width: 0;
    border-color: transparent $triangle-color transparent transparent;
  }
}
